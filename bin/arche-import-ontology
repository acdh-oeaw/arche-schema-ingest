#!/usr/bin/php
<?php

/*
 * The MIT License
 *
 * Copyright 2020 Austrian Centre for Digital Humanities.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

require_once __DIR__ . "/loadComposer.php";

use zozlak\argparse\ArgumentParser as AP;
use acdhOeaw\arche\schemaImport\Metadata;

$args = new AP("Imports an OWL ontology into the ARCHE repository.");
$args->addArgument('--user', help: 'Repository user used to perform the ingestiton');
$args->addArgument('--pswd', help: 'Repository user password');
$args->addArgument('--concurrency', type: AP::TYPE_INT, default: 3);
$args->addArgument('--verbose', action: 'store_true');
$args->addArgument('--skipBinary', action: 'store_true');
$args->addArgument('--ontologyFile', help: 'OWL file to read list of vocabularies from. If not provided, an ontology file from the currently installed acdh-oeaw/arche-schema composer library will be used.');
$args->addArgument('--ontologyVersion', help: 'Onotology version. Use only when --ontologyFile is provided.');
$args->addArgument('--ontologyUrl', help: 'Onotology version URL. Use only when --ontologyFile is provided.');
$args->addArgument('--ontologyDate', help: 'Onotology version release date. Use only when --ontologyFile is provided.');
$args->addArgument('--ontologyInfo', help: 'Onotology version info. Use only when --ontologyFile is provided.');
$args->addArgument('repositoryUrl', help: 'Repository base URL');
$args = $args->parseArgs();

$t0           = time();
$opts         = ['auth' => [$args->user, $args->pswd]];
$repo         = acdhOeaw\arche\lib\Repo::factoryFromUrl($args->repositoryUrl, $opts);
$schema       = $repo->getSchema();
$ontologyPath = \Composer\InstalledVersions::getInstallPath('acdh-oeaw/arche-schema');

$ontology = new acdhOeaw\arche\schemaImport\Ontology($schema);
if (empty($args->ontologyFile)) {
    $ontology->loadFile("$ontologyPath/acdh-schema.owl");
} else {
    $ontology->loadFile($args->ontologyFile);
}
try {
    $repo->begin();
    $ontology->import($repo, $args->verbose, $args->concurrency);
    if (!$args->skipBinary) {
        $collMeta     = $ontologyMeta = null;
        $collMeta     = Metadata::fromFile("$ontologyPath/metadata/collection.ttl");
        $ontologyMeta = Metadata::fromFile("$ontologyPath/metadata/resource.ttl");
        if (empty($args->ontologyFile)) {
            echo "Reading ontology metadata from composer and github\n";
            $ontologyFile = Metadata::enrichFromComposer($ontologyMeta, $schema->ontology, 'acdh-oeaw/arche-schema');
        } else {
            echo "Creating ontology metadata from call parameters";
            Metadata::enrichFromArgs($ontologyMeta, $schema->ontology, $args);
            $ontologyFile = $args->ontologyFile;
        }
        $ontology->importOwlFile($repo, $ontologyFile, $args->verbose, $collMeta, $ontologyMeta);
    }
    $repo->commit();
} finally {
    if ($repo->inTransaction()) {
        $repo->rollback();
    }
}
echo "\nFinished in " . (time() - $t0) . "s\n";
